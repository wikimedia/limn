#!/usr/bin/env coco

fs                      = require 'fs'
url                     = require 'url'
path    = {dirname}     = require 'path'
subproc = {exec, spawn} = require 'child_process'
exists  = fs.existsSync or path.existsSync

op                    = require 'operator'
Seq                   = require 'seq'
glob                  = require 'glob'
yaml                  = require 'js-yaml'
mkdirp                = require 'mkdirp'

express               = require 'express'

_                     = require '../src/util/underscore'
{readFilesAsync}      = require './files'
Controller            = require './controller'
view_helpers          = require './view-helpers'


/**
 * Limn project-internals
 */
{
    MODULES,
    BASE, SRC, STATIC, VIEWS, CSS, TEST,
    NODE_ENV, IS_DEV, IS_PROD, LIMN_VARDIR, LIMN_DATA
} = require '../sources'

LOG_LEVEL = process.env.LIMN_LOG_LEVEL
LOG_LEVEL or= if IS_DEV then 'INFO' else 'WARN'
LOG_LEVEL .= toUpperCase()

REV = process.env.LIMN_REV or 'HEAD'


/**
 * Limn option defaults.
 */
DEFAULT_OPTIONS =
    /**
     * @name dataDir
     * @type String
     * Path to directory where data and metadata files are stored.
     */
    dataDir : LIMN_DATA
    
    /**
     * @name varDir
     * @type String
     * Path to directory where derived files are written while in dev-mode.
     */
    varDir : LIMN_VARDIR
    
    /**
     * @name proxy
     * @type Object
     */
    proxy :
        /**
         * @name enabled
         * @type Boolean
         * Enables remote dataset proxy. If omitted, the proxy will be enabled
         * if either `proxy.whitelist` or `proxy.blacklist` are set.
         */
        enabled : false
        
        /**
         * @name whitelist
         * @type Array<String|RegExp>
         * Array of domain patterns to whitelist for proxy. Strings are matched
         * via glob syntax, but regular expressions may also be passed. 
         * If `proxy.enabled` is true but no whitelist is provided, it defaults to `['*']`.
         */
        whitelist : null
        
        /**
         * @name blacklist
         * @type Array<String|RegExp>
         * Array of domain patterns to blacklist from proxying. Strings are matched
         * via glob syntax, but regular expressions may also be passed.
         */
        blacklist : null
    
    /**
     * @name staticMaxAge
     * @type Object
     * Max-Age of static files served by Limn. Object is a hash from NODE_ENV to
     * expiry time in miliseconds, with a special key "default" that does what you
     * expect.
     */
    staticMaxAge :
        default     : 0
        development : 0
        production  : 108_000_000_ms # set a one month max-age for static files
    




# expose API
exports = module.exports = limn


/**
 * Create a new instance of the Limn middleware.
 * @param {Object} [options={}] Options:
 */
function limn(options)
    app = express.createServer()
    app = _.extend app, application
    app.init options
    app



/**
 * Application pseudo-prototype (as we don't actually inherit from the Express server).
 */
application = limn.application = 
    
    /**
     * @constructor
     */
    init : (opts={}) ->
        app   = this
        @REV  = REV
        @BASE = BASE
        
        ### setup options with defaults
        opts = _.merge {}, DEFAULT_OPTIONS, opts
        opx = opts.proxy
        opx = opts.proxy = { enabled:opx } if typeof opx is 'boolean'
        opx.enabled = true if opx.enabled is false and (opx.whitelist or opx.blacklist)
        if opx.enabled
            opx.whitelist or= <[ * ]>
            opx.blacklist or= []
        @set 'limn options', opts
        
        # create data directory
        mkdirp.sync opts.dataDir
        
        
        ### apply configuration
        
        @set 'view engine', 'jade'
        
        view_opts = {
            layout  : false
            config  : @set('limn options')
            version : REV
            IS_DEV, IS_PROD, REV
        } import view_helpers
        view_opts.__defineGetter__ 'mount', -> app.route or '/'
        @set 'view options', view_opts
        
        /**
         * All environments: pre-process requests.
         */
        @configure ->
            # Parse form submits into req.params
            @use express.bodyParser()
            
            # Allow "spoofing" HTTP methods that IE doesn't support
            @use express.methodOverride()
        
        
        # development config
        @configure 'development', ->
            opts = {varDir, dataDir} = @set 'limn options'
            
            # turn on pretty-printing
            @set('view options').pretty = true
            @set('json spaces', 4)
            
            # import dev-only deps here, so prod users don't need them
            browserify = require 'browserify'
            compiler   = require 'connect-compiler-extras'
            
            # Browserify some deps
            @use browserify do
                mount   : '/vendor/browserify.js'
                require : MODULES.browserify
                cache   : "#varDir/.cache/browserify/cache.json"
            
            # transparently recompile modules that have changed
            @use '/js/limn', compiler do
                enabled : 'coco'
                src     : SRC
                dest    : "#varDir/js/limn"
                log_level : LOG_LEVEL
            @use '/css', compiler do
                enabled : 'stylus'
                src     : CSS
                dest    : "#varDir/css"
                options : stylus : { +nib, include:CSS }
                allowed_methods : <[ GET HEAD ]>
                log_level : LOG_LEVEL
            
            # Support dynamic resources in tests
            @use '/js/limn/test', compiler do
                enabled : <[ coco stylus jade-browser jade ]>
                src     : TEST
                dest    : "#varDir/js/limn/test"
                options : stylus : { +nib, include:CSS }
                allowed_methods : <[ GET HEAD ]>
                log_level : LOG_LEVEL
            
            # Wrap modules in AMD/CommonJS closure for browser
            @use compiler do
                enabled : <[ amd commonjs_define ]>
                src     : STATIC
                dest    : varDir
                options :
                    amd             : { drop_path_parts:1, drop_full_ext:false }
                    commonjs_define : { drop_path_parts:1, drop_full_ext:false }
                log_level : LOG_LEVEL
            @use compiler do
                enabled : <[ amd commonjs_define ]>
                src     : varDir
                dest    : varDir
                options :
                    amd             : { drop_path_parts:1, drop_full_ext:true }
                    commonjs_define : { drop_path_parts:1, drop_full_ext:true }
                log_level : LOG_LEVEL
        
        /**
         * Set CORS header to allow access to our datafiles.
         * TODO: path should be based on `opts.dataDir`?
         */
        @use '/data', (req, res, next) ->
            if origin = req.header 'Origin'
                res.header 'Access-Control-Allow-Origin', origin
            next()
        
        /**
         * All environments: static files prior to applying routes and controllers.
         */
        @configure ->
            {varDir, staticMaxAge, dataDir} = @set 'limn options'
            maxAge = staticMaxAge[NODE_ENV] ? staticMaxAge.default
            
            @use                    express.static varDir,  {maxAge}
            @use '/js/limn/test',   express.static TEST,    {maxAge}
            @use '/data',           express.static dataDir, {maxAge}
            @use                    express.static STATIC,  {maxAge}
            
            @use @router
        
        
        
        # data controllers
        @controller require './controllers/graph'
        @controller require './controllers/dashboard'
        
        # Has to preceed controllers/datasource to override
        # TODO: fix Controller#mapping!
        YAML_EXT_PAT = /\.ya?ml$/i
        @get '/datasources/all', (req, res, next) ->
            opts = {varDir, dataDir} = app.set 'limn options'
            
            data = {}
            Seq()
                .seq glob, "#dataDir/datasources/**/*.@(yaml|json)", {+nocase, +nosort}, Seq
                .seq (paths) -> readFilesAsync paths, this
                .seq (txts) -> @ok _.items txts
                .flatten false
                .parMap ([f, text]) ->
                    # console.log "parsing file[#i]: '#f' -> text[#{text.length}]..."
                    k = f.replace YAML_EXT_PAT, '.json'
                    v = data[k] = {}
                    try
                        if YAML_EXT_PAT.test f
                            v = data[k] = yaml.load text
                        else
                            v = data[k] = JSON.parse text
                        # console.log "#f ok!", data
                        @ok v
                    catch err
                        console.error "[/datasources/all] Error parsing data!"
                        console.error err
                        console.error that if err.stack
                        res.send { error:String(err), partial_data:data }, 500
                .seq ->
                    res.contentType 'application/json'
                    return res.send JSON.stringify(data, null, 4) if req.query.pretty
                    res.send data
                .catch (err) ->
                    console.error '[/datasources/all] Error!'
                    console.error err
                    console.error that if err.stack
                    res.send { error:String(err), partial_data:data }, 500
        
        @controller require './controllers/datasource'
        
        # Proxy endpoint: /x
        if opts.proxy.enabled
            proxy = require('./proxy')(opts.proxy)
            @get '/x',   proxy
            @get '/x/*', proxy
        
        
        # Tests
        @get '/test', (req, res) ->
            res.render 'test'
        
        
        # All other non-controller, non-static endpoints mapped to default view
        # for client-side routing
        @get '/*', (req, res) ->
            res.render 'index'
        
        this
    

limn.view_helpers = view_helpers

