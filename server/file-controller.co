fs         = require 'fs'
path       = require 'path'
exists  = fs.existsSync or path.existsSync

_          = require 'underscore'
Seq        = require 'seq'
glob       = require 'glob'
mkdirp     = require 'mkdirp'
yaml       = require 'js-yaml'

{ LIMN_CONFIG,
} = require '../sources'

{ readJSONFilesAsync,
} = require './files'

Controller = require './controller'


/**
 * @class Resource controller backed by flat json or yaml files.
 * 
 * TODO: writeFile(id, data, [options], [cb]): error checks for existence, handles IOErrors
 * TODO: deleteFile(id, [options], [cb]): error checks for existence, handles IOErrors
 */
class FileBackedController extends Controller
    
    name    : null
    dataDir : null
    noun    : null
    
    ->
        super ...
        limnOpts = @app.set 'limn options'
        @dataDir = "#{limnOpts.dataDir}/#{@name}"
        @noun ?= @name.charAt(0).toUpperCase() + @name.slice(1)
    
    
    /**
     * @param {String} id ID of this resource.
     * @returns {String} Glob path to file for this resource.
     */
    toFile: (id) ->
        "#{@dataDir}/**/#id.@(yaml|json)"
    
    toFileSimple: (id) ->
        "#{@dataDir}/#id.json"
    
    /**
     * Finds the reified filepath for the resource `id`.
     * 
     * @param {String} id ID of this resource.
     * @param {Function} cb Callback `(err, filepath)`.
     */
    findFile: (id, cb) ->
        glob @toFile(id), {+nocase, +nosort}, (err, files) ->
            return cb err if err
            return cb 'ENOENT' unless files.length
            cb null, files[0]
    
    
    
    /**
     * Auto-load :id for related requests by looking up the so-named file in the dataDir.
     * 
     * @param {String} id ID of the resource.
     * @param {Function} cb Callback to invoke with the loaded object.
     */
    autoload: (id, cb) ->
        Seq()
            .seq readJSONFilesAsync, @toFile(id), {+yaml, -appendExt}, Seq
            .seq   (data) -> cb null, (_.values(data)[0] or {})
            .catch (err)  -> cb null, {}
    
    
    
    ### Helpers
    
    /**
     * Parses the body content of an HTTP request (usually a POST). Sends back an error object
     * and the appropriate HTTP status code for bad requests (400), like an empty body or 
     * missing `id`.
     * @returns {Boolean|Object} `false` if an error was sent, and the body content otherwise.
     */
    processBody: (req, res) ->
        unless req.body
            res.send {result:"error", message:"Data required!"}, 400 # 400: Bad Request
            return false
        
        data = req.body
        data.slug or= data.id
        data.id   or= data.slug
        
        unless data.slug
            res.send {result:"error", message:"Slug required!"}, 400 # 400: Bad Request
            return false
        
        mkdirp.sync @dataDir unless exists @dataDir
        return data
    
    isAuthorized: (req) ->
        # ids_allowed_to_save is a list of the global mediawiki ids that have rights to save
        return req.user and _ LIMN_CONFIG.ids_allowed_to_save .contains req.user.id


module.exports = exports = FileBackedController
