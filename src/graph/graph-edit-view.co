Seq = require 'seq'
moment = require 'moment'

_ = require '../util/underscore'
{ Graph,
} = require './graph-model'
{ GraphView,
} = require './graph-view'
{ ChartOptionScaffold, DEBOUNCE_RENDER,
} = require '../chart'
{ DataView, DataSetView, DataSet, DataSource,
} = require '../data'

root = do -> this




/**
 * @class View for a graph visualization encapsulating the editing UI for:
 * - Graph metadata, such as name, description, slug
 * - Chart options, using ChartOptionScaffold
 */
GraphEditView = exports.GraphEditView = GraphView.extend do # {{{
    __bind__  : <[
        wait unwait onChartTypeReady onScaffoldChange
        onFirstClickRenderOptionsTab onFirstClickRenderDataTab
    ]>
    className : 'graph-edit graph'
    template  : require '../template/graph/graph-edit'
    
    events:
        'click    .redraw-button'                        : 'stopAndRender'
        'click    .load-button'                          : 'load'
        'click    .save-button'                          : 'save'
        'click    .done-button'                          : 'done'
        'keypress .graph-name'                           : 'onNameKeypress'
        'keypress .graph-details input[type="text"]'     : 'onKeypress'
        'keypress .chart-options .value'                 : 'onKeypress'
        'submit   form.graph-details'                    : 'onDetailsSubmit'
        'change   :not(.chart-options) select'           : 'onDetailsSubmit'
        'submit   form.chart-options'                    : 'onOptionsSubmit'
        'change   .chart-options input[type="checkbox"]' : 'onOptionsSubmit'
    
    # TODO: actually apply this
    routes:
        'graphs/:graph/edit/info'                   : 'showInfoPane'
        'graphs/:graph/edit/data/metric/:metric'    : 'showDataPane'
        'graphs/:graph/edit/data'                   : 'showDataPane'
        'graphs/:graph/edit/options/:optionsFilter' : 'showOptionsPane'
        'graphs/:graph/edit/options'                : 'showOptionsPane'
    
    
    
    
    
    constructor: function GraphEditView
        GraphView ...
    
    initialize : (o={}) ->
        GraphEditView.__super__.initialize ...
        # console.log "#this.initialize!"
        
        # Start a wait for the `ready` event
        @wait()
        
        ### Chart Options Tab, Scaffold
        @scaffold = @addSubview new ChartOptionScaffold
        
        
        ### Graph Data UI
        @data_view = @addSubview new DataView { model:@model.dataset, graph_id:@id }
        @data_view
            .on 'start-waiting', @wait,         this
            .on 'stop-waiting',  @unwait,       this
            .on 'metric-change', @onDataChange, this
        
        # Rerender once the tab is visible
        # Can't use @events because we need to bind before registering
        @$el.on 'click', '.graph-data-tab',     @onFirstClickRenderDataTab
        @$el.on 'click', '.graph-options-tab',  @onFirstClickRenderOptionsTab
        
        # Kick off model load chain
        @loadData()
    
    onChartTypeReady: ->
        @scaffold.collection.reset @model.chartType.options_ordered
        @scaffold.on 'change', @onScaffoldChange
        @chartOptions @model.getOptions(), {+silent}
    
    loadData: ->
        @resizeViewport()
        @wait()
        Seq()
            .seq_ (next) ~>
                DataSource.once 'ready', next.ok
                # unless DataSource.allDataReady
                #     DataSource.once 'all-data-ready', next.ok
                # else
                #     next.ok()
            .seq_ (next) ~>
                GraphEditView.__super__.loadData ...
            .seq ~>
                @unwait()
                @onReady()
    
    onReady: ->
        return if @ready
        @unwait() # clears `wait()` from `initialize`
        @model.chartType.on 'ready', @onChartTypeReady
        @triggerReady()
        @scaffold.triggerReady()
        @chartOptions @model.getOptions(), {+silent}
        @render()
        
        @model.dataset.metrics
            .on 'add remove change', @render, this
        @model
            .on 'metric-data-loaded', @render, this
        
        # fix up the spinner element once the DOM is settled
        _.delay @checkWaiting, 50
    
    
    
    
    ### Persistence {{{
    
    /**
     * Save the graph and return to the graph viewer/browser.
     */
    done: ->
        @save()
    
    /**
     * Flush all changes.
     */
    change: ->
        @model.change()
        @scaffold.invoke 'change'
        this
    
    
    ### }}}
    ### Rendering {{{
    
    # TODO: refactor this to ChartType?
    chartOptions: (values, opts) ->
        # Handle @chartOptions(k, v, opts)
        if arguments.length > 1 and typeof values is 'string'
            [k, v, opts] = arguments
            values = { "#k": v }
        
        fields = @scaffold.collection
        if values
            for k, v in values
                fields.get(k)?.setValue v, opts
            this
        else
            options = @model.getOptions {-keepDefaults, +keepUnchanged}
            for k of @FILTER_CHART_OPTIONS
                # console.log "filter #k?", not options[k]
                if k in options and not options[k]
                    delete options[k]
            options
    
    attachSubviews: ->
        GraphEditView.__super__.attachSubviews ...
        @checkWaiting()
    
    render: ->
        return this unless @ready and not @isRendering
        @wait()
        @checkWaiting()
        root.title = "#{@get 'name'} | Limn"
        GraphEditView.__super__.render ...
        # @updateURL()
        @unwait()
        @isRendering = false
        this
    
    
    /**
     * Update the page URL using HTML5 History API
     */
    updateURL: ->
        json  = @toJSON()
        title = "#{@model.get('name') or 'New Graph'} | Edit Graph | Limn"
        url   = @toURL('edit')
        # console.log 'History.pushState', JSON.stringify(json), title, url
        History.pushState json, title, url
    
    
    ### }}}
    ### Event Handlers {{{
    
    onScaffoldChange: (scaffold, value, key, field) ->
        current = @model.getOption(key)
        # console.log do
        #     "scaffold.change! #key:"
        #     current
        #     '-->'
        #     value
        #     " ( isDefault?"
        #     (current is void and field.isDefault())
        #     "isEqual?"
        #     _.isEqual(value, current)
        #     ")   --> "
        #     unless _.isEqual(value, current) or (current is void and field.isDefault()) then 'CHANGE' else 'SQUELCH'
        
        unless _.isEqual(value, current) or (current is void and field.isDefault())
            @model.setOption(key, value, {+silent})
    
    onDataChange: ->
        console.log "#this.onDataChange!"
        @model.once 'data-ready', @render, this
              .loadData {+force}
    
    onFirstClickRenderOptionsTab: ->
        @$el.off 'click', '.graph-options-tab', @onFirstClickRenderOptionsTab
        @scaffold.render()
    
    onFirstClickRenderDataTab: ->
        @$el.off 'click', '.graph-data-tab', @onFirstClickRenderDataTab
        _.defer ~> @data_view.onMetricsChanged()
    
    onKeypress: (evt) ->
        $(evt.target).submit() if evt.keyCode is 13
    
    onNameKeypress: (evt) ->
        @$ 'form.graph-details' .submit() if evt.keyCode is 13
    
    onDetailsSubmit: ->
        console.log "#this.onDetailsSubmit!"
        @$ 'form.graph-details .graph-name' .val @$('.graph-name-row .graph-name').val()
        details = @$ 'form.graph-details' .formData()
        @model.set details
        false
    
    onOptionsSubmit: ->
        console.log "#this.onOptionsSubmit!"
        @render()
        false
    
    # }}}
    
# }}}

