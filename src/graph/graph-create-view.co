_ = require 'underscore'
ko = require 'knockout'

{ View,
} = require '../base/view'
{ Graph,
} = require './graph-model'
{ GraphView,
} = require './graph-view'
{ DataSource, ColumnDef,
} = require '../data/datasource'



class exports.GraphCreateView extends View
    template: 'graph-create'
    
    
    /**
     * @constructor
     */
    ->
        super()
        
        @blankGraph = ko.observable()
        @metrics = ko.observableArray()
        @previewDialog = ko.observable()
        @recentGraphs = ko.observableArray()
        
        @datasources = ko.observableArray()
        @filter = ko.observable()
        @datasourceType = ko.observable 'timeseries'
        @filteredDatasources = ko.computed ~>
            typeFilter = @datasourceType().toLowerCase()
            filter = (@filter() or '').toLowerCase()
            @datasources().filter ~>
                type = it.type()
                id = it.id()?.toLowerCase?() or ''
                name = it.name()?.toLowerCase?() or ''
                return type is typeFilter
                   and (not filter.length
                         or id.indexOf(filter) >= 0
                         or name.indexOf(filter) >= 0)
    
    
    newGraph: ->
        console.log 'submitted'
    
    
    afterRender: (element) ->
        return if @el()
        @el element
        
        @initializeAddForm()
        DataSource.fetchAll().done ~>
            @datasources(_.sortBy DataSource.getAllSources(), (d) -> d.name())
            @$('.datasourceSearch').typeahead({source: @datasources().map -> it.name()})
    
    
    initializeAddForm: ->
        blankGraph = new Graph do
            root:
                nodeType: 'canvas'
                y:
                    scaleType: 'linear'
                width: 900
                height: 350
                children: [
                    {nodeType: 'axis', options: {dimension: 'x', orient: 'bottom'}}
                    {nodeType: 'axis', options: {dimension: 'y', orient: 'left'}}
                    {nodeType: 'grid', options: {dimension: 'x'}}
                    {nodeType: 'grid', options: {dimension: 'y'}}
                    {nodeType: 'legend', options: {dateFormat: 'MMM DD, YYYY'}}
                    {nodeType: 'zoom-brush'}
                    {
                        nodeType: "line-group",
                        options: {palette: 'category10'},
                        children: []
                    }
                ]
        
        if @blankGraph()
            blankGraph.name @blankGraph().name()
            blankGraph.slug @blankGraph().slug()
            blankGraph.desc @blankGraph().desc()
            blankGraph.notes @blankGraph().notes()
        
        @blankGraph blankGraph
    
    
    refreshMetrics: ->
        lineNodes = @metrics().map ->
            {
                nodeType: 'line'
                metric: {
                    sourceId: it.source.id()
                    yColumn: it.id() or it.index()
                    type: it.type()
                }
            }
        
        lineGroup = _.find @blankGraph().root().children(), -> it.nodeType is 'line-group'
        lineGroup.children lineNodes
    
    
    addDatasource: (datasource) ->
        ~>
            metrics = @metrics.peek()
            for column of datasource.columns()
                if column.type() is not 'date'
                    metrics.push(column)
            @metrics _.sortBy metrics, (c) -> c.source.name()
            @refreshMetrics()
    
    
    removeMetric: (metric) ->
        ~>
            @metrics.remove metric
            @refreshMetrics()
    
    
    keepOnlyThisMetric: (metric) ->
        ~>
            metrics = _.filter @metrics.peek(), (m) ->
                m.source.id() != metric.source.id() || m is metric
            @metrics metrics
            @refreshMetrics()
    
    
    preview: ->
        limn.view.previewDialog new GraphView this
        limn.view.$('> .previewDialog').modal()
        limn.view.previewDialog().resize()
    
    
    cleanUpPreview: ->
        @initializeAddForm()
        @refreshMetrics()
    
    
    newGraph: ->
        @blankGraph().save()
            .done ~>
                @blankGraph().id @blankGraph().slug()
                limn.info "Saved Successfully with id #{@blankGraph().id()}"
                @recentGraphs.push @blankGraph()
                @cleanUpPreview()
            .fail (data, message, response) ->
                switch response.status
                    case 403
                        limn.error "Not Saved.  Please sign in with an authorized user"
                    case 409
                        limn.error "Not Saved.  Graph '#{@slug()}' already exists"
                    default
                        limn.error 'Not Saved.  There was a problem'
    
    
    deleteGraph: (graph, event) ->
        graph.destroy()
            .done ->
                limn.info "Deleted Graph #{graph.id()}"
                ko.contextFor(event.target).$parents[1].recentGraphs.remove graph
            .fail ->
                limn.error 'Not Deleted.  There was a problem'
