_ = require 'underscore'
d3 = require 'd3'
{ Dataset,
} = require './dataset'


parseOrdinalCSV = (rawData) ->
    data = []
    lines = rawData.split '\n'
    
    _.each lines, (row) ~>
        return true unless row
        data.push(row.split(','))
    data


/**
 * @class
 * @extends Dataset
 */
class exports.SeriesDataset extends Dataset
    @registerType 'series'
    
    
    (source, rawData) ->
        super ...
        if _.isArray(@data) and _.isArray(@data[0])
            @columns = _.zip ...@data
    
    
    formatParsers :
        csv   : (rawData) -> parseOrdinalCSV rawData
        tsv   : (rawData) -> parseOrdinalCSV rawData, { colSep:'\t' }
        json  : (rawData) -> rawData
        jsonp : (rawData) -> rawData
        xml   : (rawData) -> rawData
        log   : (rawData) -> rawData
    
    
    /**
     * Parses the raw data into an object representation.
     * 
     * @param {*} rawData Raw data.
     * @param {String} format Data format.
     * @returns {Object} Parsed data.
     */
    parse: (rawData, format) ->
        unless format in @formatParsers
            throw new Error "Unknown format '#format'!"
        @data = @formatParsers[format] rawData
        
        _.each @data, (row) ~>
            for column, index of @source.columns()
                row[column.id()] = column.parse row[index]
        @data
    
    
    /**
     * @returns {Array<Array>} List of rows, each of which includes all columns.
     */
    getData: ->
        @data
    
    
    /**
     * @returns {Array<Array>} List of all columns (including ID column).
     */
    getColumns: ->
        @columns
    
    
    /**
     * @param {Number} idx Index of column.
     * @returns {Array} Column at `idx`.
     */
    getColumn: (idx) ->
        @columns[idx]
    
    
    /**
     * @returns {Array<String>} List of column labels.
     */
    getLabels: ->
        @labels
    
    


