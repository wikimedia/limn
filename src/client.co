{EventEmitter} = require 'events'

{ _, op, event, root,
} = require './util'

# Decorate root limn namespace object with EventEmitter methods
limn = exports
emitter = limn.__emitter__ = new event.ReadyEmitter()
for k of <[ on addListener off removeListener emit trigger once removeAllListeners ]>
    limn[k] = emitter[k].bind emitter

limn.mount = (path) ->
    mnt = limn.config?.mount or '/'
    (if mnt is not '/' then mnt else '') + path


Backbone = require 'backbone'

{ BaseView, BaseModel, BaseList,
} = limn.base       = require './base'
{ ChartType, DygraphsChartType,
} = limn.chart      = require './chart'
{ Graph, GraphList, GraphDisplayView, GraphEditView, GraphListView,
} = limn.graph      = require './graph'
{ DashboardView, Dashboard,
} = limn.dashboard  = require './dashboard'
limn.data           = require './data'
limn.chart          = require './chart'
limn.util           = require './util'


/**
 * @class Sets up root application, automatically attaching to an existing element
 *  found at `appSelector` and delegating to the appropriate view.
 * @extends Backbone.Router
 */
LimnApp = limn.LimnApp = Backbone.Router.extend do # {{{
    appSelector : '#content .inner'
    
    routes:
        'graphs/(new|edit)'         : 'newGraph'
        'graphs/:graphId/edit'      : 'editGraph'
        'graphs/:graphId'           : 'showGraph'
        'graphs'                    : 'listGraphs'
        
        'dashboards/(new|edit)'     : 'newDashboard'
        'dashboards/:dashId/edit'   : 'editDashboard'
        'dashboards/:dashId'        : 'showDashboard'
        'dashboards'                : 'listDashboards'
    
    
    
    /**
     * @constructor
     */
    constructor: function LimnApp (@config={})
        @appSelector = that if config.appSelector
        @el  = config.el or= jQuery @appSelector .0
        @$el = jQuery @el
        Backbone.Router.call this, config
        this
    
    initialize: ->
        jQuery ~> @setup()
        this
    
    setup: ->
        # Add / route for Homepage
        @route /^(?:[\?].*)?$/, 'home'
        # Start observing history changes
        Backbone.history.start { +pushState, root:@config.mount }
    
    # Helper for setting up models
    processData: (id, data={}) ->
        ### If we got querystring args, apply them as overrides to the data
        # loc = String root.location
        # if loc.split '?' .1
        #     data = _.uncollapseObject _.fromKV that.replace('#', '%23')
        #     data.parents = JSON.parse that if data.parents
        #     data.options = _.synthesize do
        #         data.options or {}
        #         (v, k) -> [ k, dyglib.parseOption(k,v) ]
        unless id and _ <[ edit new ]> .contains id
            data.id = data.slug = id
        data
    
    
    
    /* * * *  Routes  * * * */
    
    
    home: ->
        # console.log "#this.home!"
        @showDashboard 'reportcard'
    
    
    ### Graphs
    
    createGraphModel: (id) ->
        data = @processData id
        graph = new Graph data, {+parse}
    
    newGraph: ->
        @editGraph()
    
    editGraph: (id) ->
        @model = @createGraphModel id
        @view = new GraphEditView {@model} .attach @el
    
    showGraph: (id) ->
        return @editGraph id if _ <[ new edit ]> .contains id
        @model = @createGraphModel id
        @view  = new GraphDisplayView {@model} .attach @el
    
    listGraphs: ->
        @collection = new GraphList()
        @view = new GraphListView {@collection} .attach @el
    
    
    ### Dashboards
    
    createDashboardModel: (id) ->
        data = @processData id
        dashboard = new Dashboard data, {+parse}
    
    newDashboard: ->
        console.error 'newDashboard!?'
    
    editDashboard: (id) ->
        console.error 'editDashboard!?'
    
    showDashboard: (id) ->
        return @editDashboard id if _ <[ new edit ]> .contains id
        @model = @createDashboardModel id
        @view  = new DashboardView {@model} .attach @el
        @model.once 'ready', @updateDashboardTitle, this
    
    listDashboards: ->
        console.error 'listDashboards!?'
    
    updateDashboardTitle: ->
        return this unless dashName = @model.getName()
        root.document?.title = dashName
        if sub = @model.get 'subhead'
            head = @model.get 'headline'
            @$ '.page-header h1' .html "#head <small>#sub</small>"
        this
    
    
    ### Misc
    
    $: -> @$el.find.apply @$el, arguments
    
    getClassName: ->
        "#{@..name or @..displayName}"
    
    toString: ->
        "#{@getClassName()}()"
# }}}


### Static Methods
LimnApp import do
    
    findConfig : ->
        # TODO: fill out inferred config
        config = root.limn_config or {}
        config.mount or= "/"
        config
    
    main : function limnMain
        config = limn.config or= LimnApp.findConfig()
        limn.app or= new LimnApp config unless config.libOnly
        limn.emit 'main', limn.app


jQuery LimnApp.main
